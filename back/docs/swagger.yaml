basePath: /
definitions:
  easynight_internal_models.Admin:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/easynight_internal_models.User'
      userID:
        type: string
    type: object
  easynight_internal_models.Customer:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      firstname:
        type: string
      lastname:
        type: string
      reservations:
        items:
          $ref: '#/definitions/easynight_internal_models.Reservation'
        type: array
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/easynight_internal_models.User'
      userID:
        type: string
    type: object
  easynight_internal_models.Event:
    properties:
      banner:
        type: string
      code:
        type: string
      createdAt:
        type: string
      date:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        type: string
      lat:
        type: number
      lng:
        type: number
      location:
        type: string
      messages:
        items:
          $ref: '#/definitions/easynight_internal_models.Message'
        type: array
      organizers:
        items:
          $ref: '#/definitions/easynight_internal_models.Organizer'
        type: array
      participantNumber:
        type: integer
      place:
        type: string
      rates:
        items:
          $ref: '#/definitions/easynight_internal_models.Rate'
        type: array
      reservations:
        items:
          $ref: '#/definitions/easynight_internal_models.Reservation'
        type: array
      tag:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  easynight_internal_models.FeatureFlipping:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      isEnabled:
        type: boolean
      name:
        type: string
      updatedAt:
        type: string
    type: object
  easynight_internal_models.Message:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      event:
        $ref: '#/definitions/easynight_internal_models.Event'
      eventID:
        type: string
      id:
        type: string
      organizer:
        $ref: '#/definitions/easynight_internal_models.Organizer'
      organizerID:
        type: string
      updatedAt:
        type: string
    type: object
  easynight_internal_models.Notification:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      isOpened:
        type: boolean
      receiver:
        $ref: '#/definitions/easynight_internal_models.User'
      receiverID:
        type: string
      sender:
        $ref: '#/definitions/easynight_internal_models.User'
      senderID:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  easynight_internal_models.Organizer:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      firstname:
        type: string
      lastname:
        type: string
      messages:
        items:
          $ref: '#/definitions/easynight_internal_models.Message'
        type: array
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/easynight_internal_models.User'
      userID:
        type: string
    type: object
  easynight_internal_models.Rate:
    properties:
      comment:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      event:
        $ref: '#/definitions/easynight_internal_models.Event'
      eventID:
        type: string
      id:
        type: string
      note:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/easynight_internal_models.User'
      userID:
        type: string
    type: object
  easynight_internal_models.Reservation:
    properties:
      createdAt:
        type: string
      customer:
        $ref: '#/definitions/easynight_internal_models.Customer'
      customerID:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      event:
        $ref: '#/definitions/easynight_internal_models.Event'
      eventID:
        type: string
      id:
        type: string
      qrcode:
        type: string
      updatedAt:
        type: string
    type: object
  easynight_internal_models.User:
    properties:
      admins:
        items:
          $ref: '#/definitions/easynight_internal_models.Admin'
        type: array
      createdAt:
        type: string
      customers:
        items:
          $ref: '#/definitions/easynight_internal_models.Customer'
        type: array
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: string
      notificationReceived:
        items:
          $ref: '#/definitions/easynight_internal_models.Notification'
        type: array
      notificationSent:
        items:
          $ref: '#/definitions/easynight_internal_models.Notification'
        type: array
      organizers:
        items:
          $ref: '#/definitions/easynight_internal_models.Organizer'
        type: array
      password:
        type: string
      rates:
        items:
          $ref: '#/definitions/easynight_internal_models.Rate'
        type: array
      role:
        type: string
      token:
        type: string
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_controllers.Credentials:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  internal_controllers.EventInput:
    properties:
      banner:
        type: string
      date:
        type: string
      description:
        type: string
      image:
        type: string
      lat:
        type: number
      lng:
        type: number
      location:
        type: string
      participant_number:
        type: integer
      place:
        type: string
      tag:
        type: string
      title:
        type: string
    type: object
  internal_controllers.MessageInput:
    properties:
      content:
        type: string
      eventId:
        type: string
      organizerId:
        type: string
    type: object
  internal_controllers.NotificationInput:
    properties:
      content:
        type: string
      is_opened:
        type: boolean
      receiver_id:
        type: string
      sender_id:
        type: string
      type:
        type: string
    type: object
  internal_controllers.OrganizerInput:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      user_id:
        type: string
    type: object
  internal_controllers.RateInput:
    properties:
      comment:
        type: string
      event_id:
        type: string
      note:
        type: integer
      user_id:
        type: string
    type: object
  internal_controllers.RegistrationPayload:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
    required:
    - email
    - firstname
    - lastname
    type: object
  internal_controllers.ReservationInput:
    properties:
      customerId:
        type: string
      eventId:
        type: string
      qrcode:
        type: string
    type: object
  internal_controllers.Result:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
    type: object
  internal_controllers.UpdateUserRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
    type: object
  internal_controllers.UserInput:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      newPassword:
        type: string
      password:
        type: string
    type: object
  internal_controllers.authSuccessResponse:
    properties:
      token:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample server for using Swagger with Echo.
  title: Swagger Example API
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: User credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_controllers.authSuccessResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Authenticate a user
      tags:
      - Auth
  /chats:
    post:
      consumes:
      - application/json
      description: Create a new chat with the given details
      produces:
      - application/json
      responses:
        "200":
          description: Chat created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
      summary: Create a new chat
      tags:
      - chat
  /chats/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a chat by its ID
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chat deleted
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Chat not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a chat by ID
      tags:
      - chat
    get:
      consumes:
      - application/json
      description: Retrieve a chat by its ID
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chat fetched
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Chat not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a chat by ID
      tags:
      - chat
    put:
      consumes:
      - application/json
      description: Update a chat with the given details by its ID
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chat updated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Chat not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a chat by ID
      tags:
      - chat
  /customers:
    post:
      consumes:
      - application/json
      parameters:
      - description: Registration payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.RegistrationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register as customer
      tags:
      - Users
  /event:
    post:
      consumes:
      - application/json
      parameters:
      - description: Event input
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.EventInput'
      produces:
      - application/json
      responses:
        "200":
          description: Event created successfully!
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Create a new event
      tags:
      - Event
  /event/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully!
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Delete an event
      tags:
      - Event
    get:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event found
          schema:
            type: object
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Event not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get an event by ID
      tags:
      - Event
    patch:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Event input
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.EventInput'
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully!
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Event not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Update an existing event
      tags:
      - Event
  /event/join/{code}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Invitation code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully joined the event
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Event not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Join an event using a code
      tags:
      - Event
  /events:
    get:
      consumes:
      - application/json
      parameters:
      - description: Event name
        in: query
        name: name
        type: string
      - description: Event tag
        in: query
        name: tag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event found
          schema:
            type: object
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Event not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get events
      tags:
      - Event
  /events/organizer/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Organizer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Events found
          schema:
            type: object
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Events not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get events by organizer
      tags:
      - Event
  /events/today:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Event found
          schema:
            type: object
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Event not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get events today
      tags:
      - Event
  /features:
    get:
      consumes:
      - application/json
      description: Get all features
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/easynight_internal_models.FeatureFlipping'
            type: array
      summary: Get all features
      tags:
      - Feature Flipping
    patch:
      consumes:
      - application/json
      description: Update feature state
      parameters:
      - description: Feature name
        in: formData
        name: feature
        required: true
        type: string
      - description: State
        in: formData
        name: is_enabled
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.FeatureFlipping'
      summary: Update feature state
      tags:
      - Feature Flipping
  /features/{name}:
    get:
      consumes:
      - application/json
      description: Get feature state
      parameters:
      - description: Feature name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      summary: Get feature state
      tags:
      - Feature Flipping
  /forgot-password:
    post:
      description: Change password with token
      parameters:
      - description: User Token
        in: path
        name: token
        required: true
        type: string
      responses:
        "200":
          description: Password updated
        "400":
          description: Token is required
      summary: Change password with token
      tags:
      - users
  /messages:
    post:
      consumes:
      - application/json
      description: Create a new message with the provided data
      parameters:
      - description: Message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.MessageInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/easynight_internal_models.Message'
      summary: Create a new message
      tags:
      - messages
  /messages/{id}:
    delete:
      description: Delete an existing message identified by its ID
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a message by ID
      tags:
      - messages
    get:
      description: Retrieve a message based on its unique ID
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Message'
      summary: Get a message by ID
      tags:
      - messages
    put:
      consumes:
      - application/json
      description: Update an existing message identified by its ID
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.MessageInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Message'
      summary: Update a message by ID
      tags:
      - messages
  /notifications:
    get:
      description: Get all notifications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/easynight_internal_models.Notification'
            type: array
      summary: Get all notifications
      tags:
      - notifications
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: notification created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
      summary: Create a new notification
      tags:
      - notification
  /notifications/{id}:
    delete:
      description: Delete a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a notification by ID
      tags:
      - notifications
    get:
      description: Get a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Notification'
      summary: Get a notification by ID
      tags:
      - notifications
    put:
      consumes:
      - application/json
      description: Update a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      - description: Notification Input
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.NotificationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Notification'
      summary: Update a notification by ID
      tags:
      - notifications
  /organizers:
    get:
      description: Get all organizers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/easynight_internal_models.Organizer'
            type: array
      summary: Get all organizers
      tags:
      - organizers
    post:
      consumes:
      - application/json
      parameters:
      - description: Registration payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.RegistrationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register as organizer
      tags:
      - Users
  /organizers/{id}:
    delete:
      description: Delete an organizer by ID
      parameters:
      - description: Organizer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete an organizer by ID
      tags:
      - organizers
    get:
      description: Get an organizer by ID
      parameters:
      - description: Organizer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Organizer'
      summary: Get an organizer by ID
      tags:
      - organizers
    put:
      consumes:
      - application/json
      description: Update an organizer by ID
      parameters:
      - description: Organizer ID
        in: path
        name: id
        required: true
        type: string
      - description: Organizer Input
        in: body
        name: organizer
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.OrganizerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Organizer'
      summary: Update an organizer by ID
      tags:
      - organizers
  /rates:
    get:
      description: Get all rates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/easynight_internal_models.Rate'
            type: array
      summary: Get all rates
      tags:
      - rates
    post:
      consumes:
      - application/json
      description: Create a new rate
      parameters:
      - description: Rate Input
        in: body
        name: rate
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.RateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/easynight_internal_models.Rate'
      summary: Create a new rate
      tags:
      - rates
  /rates/{id}:
    delete:
      description: Delete a rate by ID
      parameters:
      - description: Rate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a rate by ID
      tags:
      - rates
    get:
      description: Get a rate by ID
      parameters:
      - description: Rate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Rate'
      summary: Get a rate by ID
      tags:
      - rates
    put:
      consumes:
      - application/json
      description: Update a rate by ID
      parameters:
      - description: Rate ID
        in: path
        name: id
        required: true
        type: string
      - description: Rate Input
        in: body
        name: rate
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.RateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Rate'
      summary: Update a rate by ID
      tags:
      - rates
  /reservations:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Reservation request object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/easynight_internal_models.Reservation'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: delete reservation
      tags:
      - Reservation
    get:
      description: Retrieve all reservations from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/easynight_internal_models.Reservation'
            type: array
      summary: Get all reservations
      tags:
      - reservations
    post:
      consumes:
      - application/json
      parameters:
      - description: Reservation object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/easynight_internal_models.Reservation'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created
          schema:
            $ref: '#/definitions/easynight_internal_models.Reservation'
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: add reservation
      tags:
      - Reservation
  /reservations/{customerId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: customerId
        in: path
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully get
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: get reservation by user
      tags:
      - Reservation
  /reservations/{id}:
    get:
      description: Retrieve a reservation based on its unique ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Reservation'
      summary: Get a reservation by ID
      tags:
      - reservations
    put:
      consumes:
      - application/json
      description: Update an existing reservation identified by its ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated reservation data
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.ReservationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.Reservation'
      summary: Update a reservation by ID
      tags:
      - reservations
  /reservations/isValid/{reservationId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: reservationId
        in: path
        name: reservationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully get
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: get reservation validity
      tags:
      - Reservation
  /reservations/isreserv/{customerId}/{eventId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: customerId
        in: path
        name: customerId
        required: true
        type: string
      - description: eventId
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully get
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: get reservation by user
      tags:
      - Reservation
  /send-mail-forgot-password:
    post:
      description: Send an email to reset password
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      responses:
        "200":
          description: Email sent
        "400":
          description: Email is required
      summary: Send an email to reset password
      tags:
      - users
  /send-notification:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Notification sent successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Send a notification using Firebase Cloud Messaging
      tags:
      - Notification
  /users:
    get:
      description: Retrieve all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/easynight_internal_models.User'
            type: array
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided data
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/easynight_internal_models.User'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete an existing user identified by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Retrieve an user based on its unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.User'
      summary: Get an user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update an existing user identified by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/easynight_internal_models.User'
      summary: Update an user by ID
      tags:
      - users
  /users/custom/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by user ID, including first name, last name,
        email, and password.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_controllers.Result'
            type: array
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get user by ID Customer
      tags:
      - Users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Update Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully!
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update user custom details by ID
      tags:
      - Users
  /users/orga/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by user ID, including first name, last name,
        email, and password.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_controllers.Result'
            type: array
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Update Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully!
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update user details by ID
      tags:
      - Users
swagger: "2.0"
