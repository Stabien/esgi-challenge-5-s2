name: "Terraform"

on:
  push:
    branches: [ "main" ]

env:
  TF_VAR_aws_credentials: '{ "access_key": "${{ secrets.AWS_ACCESS_KEY }}", "secret_key": "${{ secrets.AWS_SECRET_KEY }}" }'
  TF_VAR_aws_ssh_key: ${{ secrets.AWS_SSH_KEY }}
  TF_VAR_aws_ssh_public_key: ${{ secrets.AWS_SSH_PUBLIC_KEY }}
  TF_VAR_db_config: '{ "host": "${{ secrets.DB_HOST }}", "port": "${{ secrets.DB_PORT }}", "username": "${{ secrets.DB_USERNAME }}", "password": "${{ secrets.DB_PASSWORD }}", "name": "${{ secrets.DB_NAME }}" }'
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_server_port: ${{ secrets.SERVER_PORT }}
  TF_VAR_git_ssh_key: ${{ secrets.SSH_GIT_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Config terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Terraform init
        id: init
        working-directory: ./back/terraform
        run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_KEY }}"

      - name: Terraform validate
        id: validate
        working-directory: ./back/terraform
        run: terraform validate

      - name: "Terraform plan"
        id: plan
        working-directory: ./back/terraform
        run: terraform plan

      - name: "Terraform apply"
        id: apply
        working-directory: ./back/terraform
        run: terraform apply -auto-approve
      
      - name: Extract Terraform outputs
        id: tf_outputs
        working-directory: ./back/terraform
        run: |
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
          echo "ec2_username=$(terraform output -raw ec2_username)" >> $GITHUB_OUTPUT
          echo "ec2_port=$(terraform output -raw ec2_port)" >> $GITHUB_OUTPUT

      - name: Connect to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.tf_outputs.outputs.ec2_public_ip }}
          username: ${{ steps.tf_outputs.outputs.ec2_username }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: ${{ steps.tf_outputs.outputs.ec2_port }}
          script: |
            cd ../esgi-challenge-s4/back
            git pull origin main
            sudo docker compose down
            sudo docker compose -f docker-compose.prod.yml up
